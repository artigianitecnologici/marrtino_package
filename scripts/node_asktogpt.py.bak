#!/usr/bin/env python

import rospy
from std_msgs.msg import String
import requests
import json
import yaml

TOPIC_response_gtp = "/gtpresponse"
TOPIC_request_gtp = "/gtprequest"

class AskToGPTNode:
    def __init__(self):
        # Initialize the node
        rospy.init_node('asktogpt', anonymous=True)

        # Publisher to publish the GPT response
        self.gpt_response_pub = rospy.Publisher(TOPIC_response_gtp, String, queue_size=10)

        # Subscriber to receive the requested text
        rospy.Subscriber(TOPIC_request_gtp, String, self.handle_request)

        # Load the API key from the YAML file
        config = self.load_config()
        self.api_key = config.get("apiKey")

        # API endpoint and headers
        self.url = "https://sviluppo.manpronet.com:8443/ai_project/v09/controller.php"
        self.headers = {
            'Content-Type': 'application/json',
            'Cookie': 'PHPSESSID=j79fjckbkivdpb1vfl5o8kejum'
        }

        rospy.loginfo("asktogpt v.1.02 node started and listening...")

    def load_config(self):
        # Load the YAML configuration file
        config_file = rospy.get_param('~config_file', 'config.yaml')
        with open(config_file, 'r') as file:
            return yaml.safe_load(file)

    def handle_request(self, msg):
        # Function to handle the received message
        request_text = msg.data
        # rospy.loginfo(f"Request received: {request_text}")
        rospy.loginfo("Request received: {}".format(request_text))
        #  assid = "asst_vg5orqR32POATtTNfVMO3AZV" hotel
        assid = "asst_0DKQrJ6yc3fdOo2T4dHBfIMA"#museo 
        treadId = "thread_TSpOHDT6ISGvqhlfmrt0MsIR"
        userId = "nomand2"
        # Build the payload for the API request
        payload = json.dumps({
            "apiKey": self.api_key,
            "action": "addMessage",
            "message": request_text,
            "assistID": assid,
            "threadID": treadId,
            "db": "mpnet_its_pesaro",
            "user": userId,
            "idUser": 1
        })

        # Send the request to the GPT API
        try:
            response = requests.post(self.url, headers=self.headers, data=payload)
            response_text = response.text
            rospy.loginfo("GPT Response: {}".format(response_text))

            # Publish the GPT response
            self.gpt_response_pub.publish(response_text)
        except Exception as e:
            rospy.logerr("Error in GPT request: {}".format(e))

if __name__ == '__main__':
    try:
        node = AskToGPTNode()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass
